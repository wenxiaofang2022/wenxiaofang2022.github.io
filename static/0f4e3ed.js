(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{505:function(e,n,t){"use strict";t.r(n);n.default="\n\nuniform float uTime;\nuniform vec3 uDragStart;\nuniform vec3 uDragTarget;\nuniform float uReleaseDecay;\nuniform float uReleaseFrequency;\nuniform float uDragReleaseTime;\nuniform float uDragRelease;\n\nvarying vec2 vUv;\nvarying float vDiff;\n\n\nvoid main() {\n    float startToTarget = distance(uDragTarget, uDragStart);\n    float distanceToStart = distance(position, uDragStart);\n    float influence = distanceToStart / (0.2 + 0.4 * startToTarget);\n    float distortion = exp(pow(clamp(influence, 0.,1.), 3.2) * -6.);\n\n    if (uDragRelease > 0.) {\n        float timeSinceRelease = uTime - uDragReleaseTime;\n        distortion *= exp(-uReleaseDecay * timeSinceRelease * max(distortion, 1.) / ( 6.));\n        distortion *= cos(timeSinceRelease * uReleaseFrequency / ( 2.28));\n    }\n\n    vec3 stretch = (uDragTarget - uDragStart) * distortion;\n    stretch += (uDragStart - position) * distortion * 0.72;\n\n    vec3 pos = position;\n    pos += stretch;\n    pos.z += abs(distortion) * 0.2;\n\n    vec4 viewPosition = modelViewMatrix * vec4(pos, 1.);\n\n    gl_Position = projectionMatrix * viewPosition;\n\n    vUv = uv;\n    vDiff = length(pos - position) * uDragRelease;\n}"}}]);